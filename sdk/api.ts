/* tslint:disable */
/* eslint-disable */
/**
 * Site Catalog Docs
 * Basic site catalog func
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MediaAttachment
 */
export interface MediaAttachment {
    /**
     * 
     * @type {string}
     * @memberof MediaAttachment
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof MediaAttachment
     */
    'file_type': string;
    /**
     * 
     * @type {string}
     * @memberof MediaAttachment
     */
    'source': string;
    /**
     * 
     * @type {string}
     * @memberof MediaAttachment
     */
    'source_id': string;
    /**
     * 
     * @type {string}
     * @memberof MediaAttachment
     */
    'content_url': string;
    /**
     * 
     * @type {string}
     * @memberof MediaAttachment
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'display_name': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'handle': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'preferred_domain': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'about': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'vision_statement': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'facebook_handle': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'twitter_handle': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'instagram_handle': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'youtube_handle': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'linkedin_handle': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'website_handle': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'cover': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'state': string;
    /**
     * 
     * @type {string}
     * @memberof Organization
     */
    'address': string;
}
/**
 * 
 * @export
 * @interface Post
 */
export interface Post {
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'short_description': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'body': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'status': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Post
     */
    'categories': Array<string>;
    /**
     * 
     * @type {Array<MediaAttachment>}
     * @memberof Post
     */
    'attachments': Array<MediaAttachment>;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Post
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface TOrgAboutData
 */
export interface TOrgAboutData {
    /**
     * 
     * @type {Organization}
     * @memberof TOrgAboutData
     */
    'org': Organization;
    /**
     * 
     * @type {Array<Taxonomy>}
     * @memberof TOrgAboutData
     */
    'taxonomies': Array<Taxonomy>;
}
/**
 * 
 * @export
 * @interface TOrgBlogData
 */
export interface TOrgBlogData {
    /**
     * 
     * @type {Organization}
     * @memberof TOrgBlogData
     */
    'org': Organization;
    /**
     * 
     * @type {Array<Post>}
     * @memberof TOrgBlogData
     */
    'posts': Array<Post>;
    /**
     * 
     * @type {Array<Taxonomy>}
     * @memberof TOrgBlogData
     */
    'taxonomies': Array<Taxonomy>;
}
/**
 * 
 * @export
 * @interface TOrgHomeData
 */
export interface TOrgHomeData {
    /**
     * 
     * @type {Organization}
     * @memberof TOrgHomeData
     */
    'org': Organization;
    /**
     * 
     * @type {Array<Post>}
     * @memberof TOrgHomeData
     */
    'posts': Array<Post>;
    /**
     * 
     * @type {Array<Post>}
     * @memberof TOrgHomeData
     */
    'sermons': Array<Post>;
    /**
     * 
     * @type {Array<Taxonomy>}
     * @memberof TOrgHomeData
     */
    'taxonomies': Array<Taxonomy>;
}
/**
 * 
 * @export
 * @interface TOrgMediaData
 */
export interface TOrgMediaData {
    /**
     * 
     * @type {Organization}
     * @memberof TOrgMediaData
     */
    'org': Organization;
    /**
     * 
     * @type {Array<Post>}
     * @memberof TOrgMediaData
     */
    'sermons': Array<Post>;
    /**
     * 
     * @type {Array<Taxonomy>}
     * @memberof TOrgMediaData
     */
    'taxonomies': Array<Taxonomy>;
}
/**
 * 
 * @export
 * @interface TOrgPostData
 */
export interface TOrgPostData {
    /**
     * 
     * @type {Organization}
     * @memberof TOrgPostData
     */
    'org': Organization;
    /**
     * 
     * @type {Post}
     * @memberof TOrgPostData
     */
    'post': Post;
    /**
     * 
     * @type {Array<Taxonomy>}
     * @memberof TOrgPostData
     */
    'taxonomies': Array<Taxonomy>;
}
/**
 * 
 * @export
 * @interface Taxonomy
 */
export interface Taxonomy {
    /**
     * 
     * @type {string}
     * @memberof Taxonomy
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Taxonomy
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof Taxonomy
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Taxonomy
     */
    'handle': string;
    /**
     * 
     * @type {string}
     * @memberof Taxonomy
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Taxonomy
     */
    'parent_id': string;
    /**
     * 
     * @type {string}
     * @memberof Taxonomy
     */
    'image': string;
    /**
     * 
     * @type {string}
     * @memberof Taxonomy
     */
    'as': string;
    /**
     * 
     * @type {string}
     * @memberof Taxonomy
     */
    'for': string;
}

/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteControllerGetStoreAboutData: async (orgDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgDomain' is not null or undefined
            assertParamExists('siteControllerGetStoreAboutData', 'orgDomain', orgDomain)
            const localVarPath = `/public/site/{org_domain}/about`
                .replace(`{${"org_domain"}}`, encodeURIComponent(String(orgDomain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteControllerGetStoreBlogData: async (orgDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgDomain' is not null or undefined
            assertParamExists('siteControllerGetStoreBlogData', 'orgDomain', orgDomain)
            const localVarPath = `/public/site/{org_domain}/blog`
                .replace(`{${"org_domain"}}`, encodeURIComponent(String(orgDomain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteControllerGetStoreHomeData: async (orgDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgDomain' is not null or undefined
            assertParamExists('siteControllerGetStoreHomeData', 'orgDomain', orgDomain)
            const localVarPath = `/public/site/{org_domain}/home`
                .replace(`{${"org_domain"}}`, encodeURIComponent(String(orgDomain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteControllerGetStoreMediaData: async (orgDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgDomain' is not null or undefined
            assertParamExists('siteControllerGetStoreMediaData', 'orgDomain', orgDomain)
            const localVarPath = `/public/site/{org_domain}/media`
                .replace(`{${"org_domain"}}`, encodeURIComponent(String(orgDomain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} item 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteControllerGetStorePostEntryData: async (item: string, orgDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'item' is not null or undefined
            assertParamExists('siteControllerGetStorePostEntryData', 'item', item)
            // verify required parameter 'orgDomain' is not null or undefined
            assertParamExists('siteControllerGetStorePostEntryData', 'orgDomain', orgDomain)
            const localVarPath = `/public/site/{org_domain}/post/{item}`
                .replace(`{${"item"}}`, encodeURIComponent(String(item)))
                .replace(`{${"org_domain"}}`, encodeURIComponent(String(orgDomain)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteControllerGetStoreAboutData(orgDomain: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TOrgAboutData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteControllerGetStoreAboutData(orgDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteControllerGetStoreBlogData(orgDomain: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TOrgBlogData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteControllerGetStoreBlogData(orgDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteControllerGetStoreHomeData(orgDomain: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TOrgHomeData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteControllerGetStoreHomeData(orgDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteControllerGetStoreMediaData(orgDomain: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TOrgMediaData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteControllerGetStoreMediaData(orgDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} item 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async siteControllerGetStorePostEntryData(item: string, orgDomain: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TOrgPostData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.siteControllerGetStorePostEntryData(item, orgDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicApiFp(configuration)
    return {
        /**
         * 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteControllerGetStoreAboutData(orgDomain: string, options?: any): AxiosPromise<TOrgAboutData> {
            return localVarFp.siteControllerGetStoreAboutData(orgDomain, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteControllerGetStoreBlogData(orgDomain: string, options?: any): AxiosPromise<TOrgBlogData> {
            return localVarFp.siteControllerGetStoreBlogData(orgDomain, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteControllerGetStoreHomeData(orgDomain: string, options?: any): AxiosPromise<TOrgHomeData> {
            return localVarFp.siteControllerGetStoreHomeData(orgDomain, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteControllerGetStoreMediaData(orgDomain: string, options?: any): AxiosPromise<TOrgMediaData> {
            return localVarFp.siteControllerGetStoreMediaData(orgDomain, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} item 
         * @param {string} orgDomain 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        siteControllerGetStorePostEntryData(item: string, orgDomain: string, options?: any): AxiosPromise<TOrgPostData> {
            return localVarFp.siteControllerGetStorePostEntryData(item, orgDomain, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
    /**
     * 
     * @param {string} orgDomain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public siteControllerGetStoreAboutData(orgDomain: string, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).siteControllerGetStoreAboutData(orgDomain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orgDomain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public siteControllerGetStoreBlogData(orgDomain: string, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).siteControllerGetStoreBlogData(orgDomain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orgDomain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public siteControllerGetStoreHomeData(orgDomain: string, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).siteControllerGetStoreHomeData(orgDomain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} orgDomain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public siteControllerGetStoreMediaData(orgDomain: string, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).siteControllerGetStoreMediaData(orgDomain, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} item 
     * @param {string} orgDomain 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public siteControllerGetStorePostEntryData(item: string, orgDomain: string, options?: AxiosRequestConfig) {
        return PublicApiFp(this.configuration).siteControllerGetStorePostEntryData(item, orgDomain, options).then((request) => request(this.axios, this.basePath));
    }
}


